tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.5/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.3/plugin.yaml
  - custom-types.yaml


inputs:
  test1_boot_volume_size:
    default: 10
  test1_image:
    default: 74ff4015-aee1-4e02-aaa8-1c77b2650394
  test1_flavor:
    default: 196235bc-7ca5-4085-ac81-7e0242bda3f9
  domain:
    default: test_domain
  external_network_name:
    default: external
  name_setting_db:
    default: names

node_templates:

    name_setter:
      type: name_setter

    management_network:
      type: cloudify.openstack.nodes.Network
      properties:
        resource_id: cloudify-management-network
        use_external_resource: true

    test1_security_group:
        type: cloudify.openstack.nodes.SecurityGroup
        properties:
            security_group:
                name: test1_security_group
                description: test1_security_group
            rules:
                -   port_range_min: 1
                    port_range_max: 65535
                    protocol: tcp
                    remote_ip_prefix: 0.0.0.0/0
                -   port_range_min: 1
                    port_range_max: 65535
                    protocol: udp
                    remote_ip_prefix: 0.0.0.0/0
                -   port_range_min: 0
                    port_range_max: 0
                    protocol: icmp
                    remote_ip_prefix: 0.0.0.0/0

    test1_cluster:
      type: cluster
      relationships:
        - type: cloudify.relationships.depends_on
          target: name_setter

    test1_boot_volume:
      type: x_volume
      properties:
          volume:
              size: { get_input: test1_boot_volume_size }
              imageRef: { get_input: test1_image }
          boot: true
      interfaces:
        cloudify.interfaces.lifecycle:
          create:
            implementation: openstack.cinder_plugin.volume.create
            inputs:
              args:
                display_name: { get_attribute: [test1_cluster, name] }
              openstack_cluster: {}
      relationships:
        -  type: cloudify.relationships.depends_on
           target: test1_cluster
        -  type: generate_userdata
           target: name_setter
           source_interfaces:
             cloudify.interfaces.relationship_lifecycle:
               preconfigure:
                 inputs:
                   name: { get_attribute: [test1_cluster, name] }


    test1_floating_ip:
      type: cloudify.openstack.nodes.FloatingIP
      properties:
        floatingip:
          floating_network_name: { get_input: external_network_name }

    test1_cfy_net_port:
      type: cloudify.openstack.nodes.Port
      relationships:
        - type: cloudify.openstack.port_connected_to_subnet
          target: management_network
        - type: cloudify.openstack.port_connected_to_security_group
          target: test1_security_group
        - type: cloudify.openstack.port_connected_to_floating_ip
          target: test1_floating_ip

    test1:
      type: centos_compute
      properties:
        domain: { concat: [ '.', { get_input: domain }] }
        server:
            flavor: { get_input: test1_flavor }
            image: { get_input: test1_image }
      interfaces:
        cloudify.interfaces.lifecycle:
          create:
            inputs:
              args:
                name: { get_attribute: [test1_cluster, name] }
                userdata:
                  type: http
                  url: { concat: ['http://185.98.150.200:8000/', { get_attribute: [test1_cluster, name] }] }
      relationships:
        - type: cloudify.relationships.connected_to
          target: test1_boot_volume
        - type: cloudify.relationships.connected_to
          target: test1_cfy_net_port
        - type: cloudify.relationships.depends_on
          target: test1_cluster

    test1_some_operation:
      type: cloudify.nodes.Root
      relationships:
        - type: cloudify.relationships.depends_on
          target: test1

    test1_reboot:
      type: cloudify.nodes.Root
      relationships:
        - type: cloudify.relationships.depends_on
          target: test1_some_operation

    test1_some_operation_after_reboot:
      type: cloudify.nodes.Root
      relationships:
        - type: cloudify.relationships.depends_on
          target: test1_reboot

groups:
  test_scaling_group:
    members: [test1_cluster, test1_boot_volume, test1, test1_cfy_net_port, test1_floating_ip, test1_some_operation, test1_reboot, test1_some_operation_after_reboot]

policies:
  scale_policy1:
    type: cloudify.policies.scaling
    properties:
      default_instances: 2
    targets: [test_scaling_group]